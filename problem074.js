// Generated by CoffeeScript 1.4.0
(function() {
  var c, chainLength, combinationCount, combs, digits, euler, factorials, i, next, nextNumbers, perms, permutationsCount, sum, _i, _j, _len,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  euler = require("euler");

  next = function(n, factorials) {
    return euler.digits(n).map(function(i) {
      return factorials[i];
    }).reduce((function(a, b) {
      return a + b;
    }), 0);
  };

  chainLength = function(n, nextNumbers, factorials) {
    var num, visited;
    visited = [n];
    while (1) {
      if (!nextNumbers[n]) {
        nextNumbers[n] = next(n, factorials);
      }
      num = nextNumbers[n];
      if (__indexOf.call(visited, num) >= 0) {
        return visited.length;
      }
      visited.push(num);
      n = num;
    }
  };

  combinationCount = function(k, n, factorials) {
    return factorials[n] / (factorials[n - k] * factorials[k]);
  };

  permutationsCount = function(counter, length, factorials) {
    var k, temp, v;
    temp = 1;
    for (k in counter) {
      v = counter[k];
      temp *= combinationCount(v, length, factorials);
      length -= v;
    }
    return temp;
  };

  nextNumbers = {};

  factorials = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 9; i = ++_i) {
      _results.push(euler.factorial(i));
    }
    return _results;
  })();

  digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];

  sum = 0;

  for (i = _i = 1; _i <= 6; i = ++_i) {
    combs = euler.repcombinations(digits, i);
    for (_j = 0, _len = combs.length; _j < _len; _j++) {
      c = combs[_j];
      if (!(chainLength(euler.digitsToNumber(c), nextNumbers, factorials) === 60)) {
        continue;
      }
      perms = permutationsCount(euler.counter(c), c.length, factorials);
      sum += perms + ((perms * 3 / 4) * (__indexOf.call(c, 1) >= 0));
    }
  }

  console.log(sum);

}).call(this);
